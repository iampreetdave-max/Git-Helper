name: Advanced Repository Analysis

# ========================================
# SCHEDULE CONFIGURATION
# ========================================
on:
  schedule:
    # Runs daily at 2 AM UTC (customize time as needed)
    - cron: '0 2 * * *'
  
  # Allow manual trigger from GitHub Actions UI
  workflow_dispatch:
  
  # Auto-run when workflow file is modified
  push:
    branches:
      - main
      - master
    paths:
      - '.github/workflows/daily-analysis.yml'
      - '.github/scripts/**'

# ========================================
# PERMISSIONS
# ========================================
permissions:
  contents: write      # Required to commit changes
  actions: read        # Required to read workflow runs
  issues: write        # Optional: for creating issues

# ========================================
# MAIN JOB
# ========================================
jobs:
  analyze-and-update:
    runs-on: ubuntu-latest
    
    steps:
      # ========================================
      # STEP 1: Checkout Repository
      # ========================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history for changelog
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # ========================================
      # STEP 2: Setup Python Environment
      # ========================================
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # ========================================
      # STEP 3: Install Analysis Tools
      # ========================================
      - name: Install analysis tools
        continue-on-error: true
        run: |
          echo "=== Installing Analysis Tools ===" > install.log
          
          # Upgrade pip first
          pip install --upgrade pip 2>&1 | tee -a install.log
          
          # Install Python analysis tools
          pip install pylint flake8 bandit radon pytest pytest-cov pip-audit safety 2>&1 | tee -a install.log || echo "Warning: Some Python tools failed"
          
          # Install Node.js tools if npm is available
          if command -v npm &> /dev/null; then
            npm install -g jshint markdownlint-cli 2>&1 | tee -a install.log || echo "Warning: Some Node tools failed"
          fi
          
          echo "Installation complete"
      
      # ========================================
      # STEP 4: Run Repository Analysis
      # ========================================
      - name: Run repository analysis
        id: analysis
        continue-on-error: true
        run: |
          python .github/scripts/analyzer.py
      
      # ========================================
      # STEP 5: Generate Changelog
      # ========================================
      - name: Generate changelog
        continue-on-error: true
        run: |
          python .github/scripts/changelog_generator.py
      
      # ========================================
      # STEP 6: Update README
      # ========================================
      - name: Update README
        continue-on-error: true
        run: |
          python .github/scripts/readme_updater.py
      
      # ========================================
      # STEP 7: Commit and Push Changes
      # ========================================
      - name: Commit and push changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add README.md CHANGELOG.md .gitignore requirements.txt .github/.analysis_marker .github/analysis_history.json 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Advanced analysis update

          - Analysis: $(date -u +"%Y-%m-%d %H:%M UTC")
          - Errors: ${{ steps.analysis.outputs.error_count || 0 }}
          - Security Issues: ${{ steps.analysis.outputs.security_issues || 0 }}
          - Self-healing actions performed

          [skip ci]"
            
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Changes pushed successfully"
                break
              else
                echo "‚ö†Ô∏è  Push failed, retry $i/3"
                if [ $i -lt 3 ]; then
                  sleep 5
                  git pull --rebase
                else
                  echo "‚ùå Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          fi
      
      # ========================================
      # STEP 8: Upload Artifacts
      # ========================================
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: analysis-results-${{ github.run_number }}
          path: |
            analysis_results.json
            .github/analysis_history.json
            coverage.json
            install.log
          retention-days: 30
      
      # ========================================
      # STEP 9: Create Job Summary
      # ========================================
      - name: Create job summary
        if: always()
        run: |
          python .github/scripts/create_summary.py