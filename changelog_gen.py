#!/usr/bin/env python3
"""
Changelog Generator

Generates CHANGELOG.md from git commit history
100% LOCAL - NO EXTERNAL APIS
"""
from datetime import datetime, timedelta
from pathlib import Path
import subprocess


def run_cmd(cmd: str, timeout: int = 30) -> tuple:
    """Execute command safely"""
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            capture_output=True, 
            text=True, 
            timeout=timeout
        )
        return result.stdout, result.returncode
    except subprocess.TimeoutExpired:
        return "", 1
    except Exception as e:
        print(f"Command error: {e}")
        return "", 1


def generate_changelog():
    """Generate changelog from git history"""
    print("üìù Generating CHANGELOG.md...")
    
    changelog_path = Path('CHANGELOG.md')
    
    # Get commits from last 30 days
    since = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    stdout, code = run_cmd(f'git log --since="{since}" --pretty=format:"%h|%ad|%an|%s" --date=short')
    
    if code == 0 and stdout:
        # Parse commits by date
        commits_by_date = {}
        for line in stdout.strip().split('\n'):
            parts = line.split('|', 3)
            if len(parts) == 4:
                hash_val, date, author, message = parts
                
                if date not in commits_by_date:
                    commits_by_date[date] = []
                
                commits_by_date[date].append({
                    'hash': hash_val,
                    'author': author,
                    'message': message
                })
        
        # Build changelog content
        lines = [
            "# Changelog",
            "",
            "All notable changes to this project will be documented in this file.",
            "",
            "*Auto-generated by GitHub Actions*",
            ""
        ]
        
        # Add commits grouped by date
        for date in sorted(commits_by_date.keys(), reverse=True):
            lines.append(f"## [{date}]")
            lines.append("")
            
            for commit in commits_by_date[date]:
                msg = commit['message']
                
                # Categorize commit by keywords
                if any(word in msg.lower() for word in ['fix', 'bug', 'patch']):
                    prefix = 'üêõ **Fixed:**'
                elif any(word in msg.lower() for word in ['feat', 'add', 'new']):
                    prefix = '‚ú® **Added:**'
                elif any(word in msg.lower() for word in ['update', 'change', 'modify']):
                    prefix = '‚ôªÔ∏è **Changed:**'
                elif any(word in msg.lower() for word in ['doc', 'readme']):
                    prefix = 'üìö **Documentation:**'
                elif any(word in msg.lower() for word in ['test']):
                    prefix = '‚úÖ **Testing:**'
                elif any(word in msg.lower() for word in ['security', 'vuln']):
                    prefix = 'üîí **Security:**'
                else:
                    prefix = 'üîß'
                
                lines.append(f"- {prefix} {msg} ([`{commit['hash']}`](../../commit/{commit['hash']}))")
            
            lines.append("")
        
        # Add footer
        lines.append("---")
        lines.append("")
        lines.append(f"*Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*")
        
        # Save changelog
        try:
            changelog_path.write_text('\n'.join(lines))
            print("‚úÖ CHANGELOG.md updated successfully")
            print(f"   Total commits: {sum(len(commits) for commits in commits_by_date.values())}")
            print(f"   Date range: {min(commits_by_date.keys())} to {max(commits_by_date.keys())}")
        except Exception as e:
            print(f"‚ùå Error writing CHANGELOG.md: {e}")
    else:
        print("‚ö†Ô∏è  No git history available or git not found")
        
        # Create minimal changelog
        try:
            changelog_path.write_text(f"""# Changelog

All notable changes to this project will be documented in this file.

*Auto-generated by GitHub Actions*

## No History Available

This repository doesn't have commit history from the last 30 days, or git is not available.

---

*Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
""")
            print("‚ÑπÔ∏è  Created minimal CHANGELOG.md")
        except Exception as e:
            print(f"‚ùå Error creating minimal changelog: {e}")


if __name__ == "__main__":
    generate_changelog()